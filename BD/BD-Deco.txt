4.- Genere la sintaxis para crear una tabla llamada “Oficinas” con los siguientes campos
ID – Int
Nombre – Varchar
Direccion – Varchar
Ciudad - Varchar
Estado	- Varchar
Pais – Varchar
División - Int
Donde el ID es un campo único y ningún campo acepta nulos.


CREATE TABLE oficinas (
  ID int(11) NOT NULL PRIMARY KEY ,
  Nombre varchar(100) NOT NULL,
  Direccion varchar(100) NOT NULL,
  Ciudad varchar(100) NOT NULL,
  Estado varchar(100) NOT NULL,
  Pais varchar(100) NOT NULL,
  Division int(11) NOT NULL
);

4.- Genere un Stored Procedure que se encargue realizar un insert en la tabla Oficinas (Declarada en el ejemplo anterior).
Reglas: El SP debe tener un parámetro que si el valor es 1 se realiza el insert, si es 0 se realiza el un update al campo direccion.

CREATE procedure insertOficinas
 @accion INT,
    @nombre VARCHAR(100),
    @direccion VARCHAR(100),
    @ciudad VARCHAR(100),
    @estado VARCHAR(100),
    @pais VARCHAR(100),
    @division INT
AS    
  begin    
    IF @accion = 1 
begin
      Insert Into Oficinas(ID,Nombre,Direccion,Ciudad,Estado,Pais,Division) VALUES((SELECT MAX(ID) + 1 FROM Oficinas),@nombre,@direccion,@ciudad,@estado,@pais,@division)
    end 
    ELSE IF @accion = 0 
begin
     UPDATE `oficinas` SET `Direccion`= @direccion where ID =(SELECT MAX(ID) FROM Oficinas)
    end 
  end;


5.- Genera in trigger que se ejecute al insertar un registro en la tabla Oficina. Este trigger consultara la secuencia IDOFICINA_SEC y le integrara el valor de la secuencia al campo ID.

CREATE SEQUENCE IDOFICINA_SEC   
    AS int  
    START WITH 1  
    INCREMENT BY 1 ;


CREATE TRIGGER Trigger_insertarOficinas
ON Oficina
AFTER INSERT
AS
BEGIN
    DECLARE @ID INT
    SELECT @ID = NEXT VALUE FOR IDOFICINA_SEC

    UPDATE Oficina
    SET ID = @ID
    WHERE ID = (SELECT MAX(ID) FROM Oficinas)
END




